// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tVideoFieldNames          = builder.RawFieldNames(&TVideo{})
	tVideoRows                = strings.Join(tVideoFieldNames, ",")
	tVideoRowsExpectAutoSet   = strings.Join(stringx.Remove(tVideoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tVideoRowsWithPlaceHolder = strings.Join(stringx.Remove(tVideoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tVideoModel interface {
		Insert(ctx context.Context, data *TVideo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TVideo, error)
		Update(ctx context.Context, data *TVideo) error
		Delete(ctx context.Context, id int64) error
		SelectVideoExist(ctx context.Context,videoSha256 string) (*TVideo,error)
		AddReadCount(ctx context.Context,id int64,count int64) error
	}

	defaultTVideoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TVideo struct {
		Id          int64          `db:"id"`           // id
		Uid         string         `db:"uid"`          // 用户id
		Title       string         `db:"title"`        // 标题
		Content     sql.NullString `db:"content"`      // 内容
		Media       sql.NullString `db:"media"`        // 文件
		CoverUrl    sql.NullString `db:"cover_url"`    // 视频封面
		VideoSha256 sql.NullString `db:"video_sha256"` // 视频哈希值
		ReadCount   int64          `db:"read_count"`   // 浏览量
		Type        int64          `db:"type"`         // 帖子类型：1图文2视频3文章
		Address     sql.NullString `db:"address"`      // 地址名称
		Longitude   float64        `db:"longitude"`    // 经度
		Latitude    float64        `db:"latitude"`     // 纬度
		CreateTime  time.Time      `db:"create_time"`  // 创建时间
		UpdateTime  time.Time      `db:"update_time"`  // 最后修改时间
	}
)

func newTVideoModel(conn sqlx.SqlConn) *defaultTVideoModel {
	return &defaultTVideoModel{
		conn:  conn,
		table: "`t_video`",
	}
}

func (m *defaultTVideoModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTVideoModel) FindOne(ctx context.Context, id int64) (*TVideo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tVideoRows, m.table)
	var resp TVideo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTVideoModel) Insert(ctx context.Context, data *TVideo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, tVideoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Uid, data.Title, data.Content, data.Media, data.CoverUrl, data.VideoSha256, data.ReadCount, data.Type, data.Address, data.Longitude, data.Latitude)
	return ret, err
}

func (m *defaultTVideoModel) Update(ctx context.Context, data *TVideo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tVideoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Uid, data.Title, data.Content, data.Media, data.CoverUrl, data.VideoSha256, data.ReadCount, data.Type, data.Address, data.Longitude, data.Latitude, data.Id)
	return err
}

func (m *defaultTVideoModel) tableName() string {
	return m.table
}

func (m *defaultTVideoModel) SelectVideoExist(ctx context.Context,videoSha256 string) (*TVideo,error) {
	var resp *TVideo
	query := fmt.Sprintf("select %s from %s where `video_sha256` = ? limit 1",tVideoRows,m.table)
	err := m.conn.QueryRowCtx(ctx,&resp,query,videoSha256)
	if err != nil {
		return resp,nil
	}
	switch err {
	case nil:
		return resp,nil
	case sqlc.ErrNotFound:
		return nil,ErrNotFound
	default:
		return nil,err
	}
}


func (m *defaultTVideoModel) AddReadCount(ctx context.Context,id int64,count int64) error {
	updateQuery := fmt.Sprintf("update %s set read_count = read_count + ? where id = ?",m.table)
	_,err := m.conn.ExecCtx(ctx,updateQuery,count,id)
	if err != nil {
		return err
	}
	return nil
}
