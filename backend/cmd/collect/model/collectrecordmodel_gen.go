// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	collectRecordFieldNames          = builder.RawFieldNames(&CollectRecord{})
	collectRecordRows                = strings.Join(collectRecordFieldNames, ",")
	collectRecordRowsExpectAutoSet   = strings.Join(stringx.Remove(collectRecordFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	collectRecordRowsWithPlaceHolder = strings.Join(stringx.Remove(collectRecordFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	collectRecordModel interface {
		Insert(ctx context.Context, data *CollectRecord) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*CollectRecord, error)
		FindOneByBizIdObjIdUserId(ctx context.Context, bizId string, objId int64, userId int64) (*CollectRecord, error)
		Update(ctx context.Context, data *CollectRecord) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCollectRecordModel struct {
		conn  sqlx.SqlConn
		table string
	}

	CollectRecord struct {
		Id         int64     `db:"id"`          // 主键ID
		BizId      string    `db:"biz_id"`      // 业务ID
		ObjId      int64     `db:"obj_id"`      // 收藏对象id
		UserId     int64     `db:"user_id"`     // 用户ID
		CreateTime time.Time `db:"create_time"` // 创建时间
		UpdateTime time.Time `db:"update_time"` // 最后修改时间
	}
)

func newCollectRecordModel(conn sqlx.SqlConn) *defaultCollectRecordModel {
	return &defaultCollectRecordModel{
		conn:  conn,
		table: "`collect_record`",
	}
}

func (m *defaultCollectRecordModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCollectRecordModel) FindOne(ctx context.Context, id int64) (*CollectRecord, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", collectRecordRows, m.table)
	var resp CollectRecord
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCollectRecordModel) FindOneByBizIdObjIdUserId(ctx context.Context, bizId string, objId int64, userId int64) (*CollectRecord, error) {
	var resp CollectRecord
	query := fmt.Sprintf("select %s from %s where `biz_id` = ? and `obj_id` = ? and `user_id` = ? limit 1", collectRecordRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, bizId, objId, userId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCollectRecordModel) Insert(ctx context.Context, data *CollectRecord) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, collectRecordRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.BizId, data.ObjId, data.UserId)
	return ret, err
}

func (m *defaultCollectRecordModel) Update(ctx context.Context, newData *CollectRecord) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, collectRecordRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.BizId, newData.ObjId, newData.UserId, newData.Id)
	return err
}

func (m *defaultCollectRecordModel) tableName() string {
	return m.table
}
