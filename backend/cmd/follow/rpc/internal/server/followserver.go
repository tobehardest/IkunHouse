// Code generated by goctl. DO NOT EDIT.
// Source: follow.proto

package server

import (
	"context"

	"IkunHouse/cmd/follow/rpc/follow"
	"IkunHouse/cmd/follow/rpc/internal/logic"
	"IkunHouse/cmd/follow/rpc/internal/svc"
)

type FollowServer struct {
	svcCtx *svc.ServiceContext
	follow.UnimplementedFollowServer
}

func NewFollowServer(svcCtx *svc.ServiceContext) *FollowServer {
	return &FollowServer{
		svcCtx: svcCtx,
	}
}

// 关注
func (s *FollowServer) Follow(ctx context.Context, in *follow.FollowReq) (*follow.FollowRes, error) {
	l := logic.NewFollowLogic(ctx, s.svcCtx)
	return l.Follow(in)
}

// 取消关注
func (s *FollowServer) UnFollow(ctx context.Context, in *follow.UnFollowReq) (*follow.UnFollowRes, error) {
	l := logic.NewUnFollowLogic(ctx, s.svcCtx)
	return l.UnFollow(in)
}

// 关注列表
func (s *FollowServer) FolloweeList(ctx context.Context, in *follow.FolloweeListReq) (*follow.FolloweeListRes, error) {
	l := logic.NewFolloweeListLogic(ctx, s.svcCtx)
	return l.FolloweeList(in)
}

// 粉丝列表
func (s *FollowServer) FollowerList(ctx context.Context, in *follow.FollowerListReq) (*follow.FollowerListRes, error) {
	l := logic.NewFollowerListLogic(ctx, s.svcCtx)
	return l.FollowerList(in)
}

// 是否已关注
func (s *FollowServer) HasFollowed(ctx context.Context, in *follow.HasFollowedReq) (*follow.HasFollowedRes, error) {
	l := logic.NewHasFollowedLogic(ctx, s.svcCtx)
	return l.HasFollowed(in)
}
