// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	followCountFieldNames          = builder.RawFieldNames(&FollowCount{})
	followCountRows                = strings.Join(followCountFieldNames, ",")
	followCountRowsExpectAutoSet   = strings.Join(stringx.Remove(followCountFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	followCountRowsWithPlaceHolder = strings.Join(stringx.Remove(followCountFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheFollowCountIdPrefix     = "cache:followCount:id:"
	cacheFollowCountUserIdPrefix = "cache:followCount:userId:"
)

type (
	followCountModel interface {
		Insert(ctx context.Context, data *FollowCount) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*FollowCount, error)
		FindOneByUserId(ctx context.Context, userId int64) (*FollowCount, error)
		Update(ctx context.Context, data *FollowCount) error
		Delete(ctx context.Context, id int64) error
	}

	defaultFollowCountModel struct {
		sqlc.CachedConn
		table string
	}

	FollowCount struct {
		Id          int64     `db:"id"`           // 主键ID
		UserId      int64     `db:"user_id"`      // 用户ID
		FollowCount int64     `db:"follow_count"` // 关注数
		FansCount   int64     `db:"fans_count"`   // 粉丝数
		CreateTime  time.Time `db:"create_time"`  // 创建时间
		UpdateTime  time.Time `db:"update_time"`  // 最后修改时间
	}
)

func newFollowCountModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultFollowCountModel {
	return &defaultFollowCountModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`follow_count`",
	}
}

func (m *defaultFollowCountModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	followCountIdKey := fmt.Sprintf("%s%v", cacheFollowCountIdPrefix, id)
	followCountUserIdKey := fmt.Sprintf("%s%v", cacheFollowCountUserIdPrefix, data.UserId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, followCountIdKey, followCountUserIdKey)
	return err
}

func (m *defaultFollowCountModel) FindOne(ctx context.Context, id int64) (*FollowCount, error) {
	followCountIdKey := fmt.Sprintf("%s%v", cacheFollowCountIdPrefix, id)
	var resp FollowCount
	err := m.QueryRowCtx(ctx, &resp, followCountIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", followCountRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFollowCountModel) FindOneByUserId(ctx context.Context, userId int64) (*FollowCount, error) {
	followCountUserIdKey := fmt.Sprintf("%s%v", cacheFollowCountUserIdPrefix, userId)
	var resp FollowCount
	err := m.QueryRowIndexCtx(ctx, &resp, followCountUserIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", followCountRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFollowCountModel) Insert(ctx context.Context, data *FollowCount) (sql.Result, error) {
	followCountIdKey := fmt.Sprintf("%s%v", cacheFollowCountIdPrefix, data.Id)
	followCountUserIdKey := fmt.Sprintf("%s%v", cacheFollowCountUserIdPrefix, data.UserId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, followCountRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.FollowCount, data.FansCount)
	}, followCountIdKey, followCountUserIdKey)
	return ret, err
}

func (m *defaultFollowCountModel) Update(ctx context.Context, newData *FollowCount) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	followCountIdKey := fmt.Sprintf("%s%v", cacheFollowCountIdPrefix, data.Id)
	followCountUserIdKey := fmt.Sprintf("%s%v", cacheFollowCountUserIdPrefix, data.UserId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, followCountRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.UserId, newData.FollowCount, newData.FansCount, newData.Id)
	}, followCountIdKey, followCountUserIdKey)
	return err
}

func (m *defaultFollowCountModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheFollowCountIdPrefix, primary)
}

func (m *defaultFollowCountModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", followCountRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultFollowCountModel) tableName() string {
	return m.table
}
