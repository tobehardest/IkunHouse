// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	videoTagFieldNames          = builder.RawFieldNames(&VideoTag{})
	videoTagRows                = strings.Join(videoTagFieldNames, ",")
	videoTagRowsExpectAutoSet   = strings.Join(stringx.Remove(videoTagFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	videoTagRowsWithPlaceHolder = strings.Join(stringx.Remove(videoTagFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	videoTagModel interface {
		Insert(ctx context.Context, data *VideoTag) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*VideoTag, error)
		Update(ctx context.Context, data *VideoTag) error
		Delete(ctx context.Context, id int64) error
	}

	defaultVideoTagModel struct {
		conn  sqlx.SqlConn
		table string
	}

	VideoTag struct {
		Id         int64     `db:"id"`          // 主键ID
		TagId      int64     `db:"tag_id"`      // 标签id
		VideoId    int64     `db:"video_id"`    // 视频id
		CreateTime time.Time `db:"create_time"` // 创建时间
		UpdateTime time.Time `db:"update_time"` // 最后修改时间
	}
)

func newVideoTagModel(conn sqlx.SqlConn) *defaultVideoTagModel {
	return &defaultVideoTagModel{
		conn:  conn,
		table: "`video_tag`",
	}
}

func (m *defaultVideoTagModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultVideoTagModel) FindOne(ctx context.Context, id int64) (*VideoTag, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", videoTagRows, m.table)
	var resp VideoTag
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultVideoTagModel) Insert(ctx context.Context, data *VideoTag) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, videoTagRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.TagId, data.VideoId)
	return ret, err
}

func (m *defaultVideoTagModel) Update(ctx context.Context, data *VideoTag) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, videoTagRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.TagId, data.VideoId, data.Id)
	return err
}

func (m *defaultVideoTagModel) tableName() string {
	return m.table
}
