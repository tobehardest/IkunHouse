// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.2
// source: cmd/post/rpc/post.proto

package post

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Post_UploadVideo_FullMethodName     = "/post.Post/UploadVideo"
	Post_GetVideoList_FullMethodName    = "/post.Post/GetVideoList"
	Post_GetHotVideoList_FullMethodName = "/post.Post/GetHotVideoList"
	Post_GetVideoByUid_FullMethodName   = "/post.Post/GetVideoByUid"
	Post_SearchVideo_FullMethodName     = "/post.Post/SearchVideo"
	Post_GetTagList_FullMethodName      = "/post.Post/GetTagList"
	Post_SetCommentNum_FullMethodName   = "/post.Post/SetCommentNum"
	Post_SetLikeNum_FullMethodName      = "/post.Post/SetLikeNum"
	Post_CollectNum_FullMethodName      = "/post.Post/CollectNum"
)

// PostClient is the client API for Post service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostClient interface {
	// 上传视频
	UploadVideo(ctx context.Context, in *UploadVideoRequest, opts ...grpc.CallOption) (*UploadVideoResponse, error)
	// 获得视频 - 默认/分类
	GetVideoList(ctx context.Context, in *GetVideoListRequest, opts ...grpc.CallOption) (*GetVideoListResponse, error)
	// 获得热门视频
	GetHotVideoList(ctx context.Context, in *GetHotVideoRequest, opts ...grpc.CallOption) (*GetHotVideoResponse, error)
	// 根据用户id查找视频
	GetVideoByUid(ctx context.Context, in *GetVideoByUidRequest, opts ...grpc.CallOption) (*GetVideoByUidResponse, error)
	// 根据搜索查询视频
	SearchVideo(ctx context.Context, in *SearchVideoRequest, opts ...grpc.CallOption) (*SearchVideoResponse, error)
	// 获得类别
	GetTagList(ctx context.Context, in *GetTagListRequest, opts ...grpc.CallOption) (*GetTagListResponse, error)
	// 评论数操作
	SetCommentNum(ctx context.Context, in *CommentNumRequest, opts ...grpc.CallOption) (*CommentNumResponse, error)
	// 点赞数操作
	SetLikeNum(ctx context.Context, in *LikeNumRequest, opts ...grpc.CallOption) (*LikeNumResponse, error)
	// 收藏数操作
	CollectNum(ctx context.Context, in *CollectNumRequest, opts ...grpc.CallOption) (*CollectNumResponse, error)
}

type postClient struct {
	cc grpc.ClientConnInterface
}

func NewPostClient(cc grpc.ClientConnInterface) PostClient {
	return &postClient{cc}
}

func (c *postClient) UploadVideo(ctx context.Context, in *UploadVideoRequest, opts ...grpc.CallOption) (*UploadVideoResponse, error) {
	out := new(UploadVideoResponse)
	err := c.cc.Invoke(ctx, Post_UploadVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) GetVideoList(ctx context.Context, in *GetVideoListRequest, opts ...grpc.CallOption) (*GetVideoListResponse, error) {
	out := new(GetVideoListResponse)
	err := c.cc.Invoke(ctx, Post_GetVideoList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) GetHotVideoList(ctx context.Context, in *GetHotVideoRequest, opts ...grpc.CallOption) (*GetHotVideoResponse, error) {
	out := new(GetHotVideoResponse)
	err := c.cc.Invoke(ctx, Post_GetHotVideoList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) GetVideoByUid(ctx context.Context, in *GetVideoByUidRequest, opts ...grpc.CallOption) (*GetVideoByUidResponse, error) {
	out := new(GetVideoByUidResponse)
	err := c.cc.Invoke(ctx, Post_GetVideoByUid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) SearchVideo(ctx context.Context, in *SearchVideoRequest, opts ...grpc.CallOption) (*SearchVideoResponse, error) {
	out := new(SearchVideoResponse)
	err := c.cc.Invoke(ctx, Post_SearchVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) GetTagList(ctx context.Context, in *GetTagListRequest, opts ...grpc.CallOption) (*GetTagListResponse, error) {
	out := new(GetTagListResponse)
	err := c.cc.Invoke(ctx, Post_GetTagList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) SetCommentNum(ctx context.Context, in *CommentNumRequest, opts ...grpc.CallOption) (*CommentNumResponse, error) {
	out := new(CommentNumResponse)
	err := c.cc.Invoke(ctx, Post_SetCommentNum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) SetLikeNum(ctx context.Context, in *LikeNumRequest, opts ...grpc.CallOption) (*LikeNumResponse, error) {
	out := new(LikeNumResponse)
	err := c.cc.Invoke(ctx, Post_SetLikeNum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postClient) CollectNum(ctx context.Context, in *CollectNumRequest, opts ...grpc.CallOption) (*CollectNumResponse, error) {
	out := new(CollectNumResponse)
	err := c.cc.Invoke(ctx, Post_CollectNum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostServer is the server API for Post service.
// All implementations must embed UnimplementedPostServer
// for forward compatibility
type PostServer interface {
	// 上传视频
	UploadVideo(context.Context, *UploadVideoRequest) (*UploadVideoResponse, error)
	// 获得视频 - 默认/分类
	GetVideoList(context.Context, *GetVideoListRequest) (*GetVideoListResponse, error)
	// 获得热门视频
	GetHotVideoList(context.Context, *GetHotVideoRequest) (*GetHotVideoResponse, error)
	// 根据用户id查找视频
	GetVideoByUid(context.Context, *GetVideoByUidRequest) (*GetVideoByUidResponse, error)
	// 根据搜索查询视频
	SearchVideo(context.Context, *SearchVideoRequest) (*SearchVideoResponse, error)
	// 获得类别
	GetTagList(context.Context, *GetTagListRequest) (*GetTagListResponse, error)
	// 评论数操作
	SetCommentNum(context.Context, *CommentNumRequest) (*CommentNumResponse, error)
	// 点赞数操作
	SetLikeNum(context.Context, *LikeNumRequest) (*LikeNumResponse, error)
	// 收藏数操作
	CollectNum(context.Context, *CollectNumRequest) (*CollectNumResponse, error)
	mustEmbedUnimplementedPostServer()
}

// UnimplementedPostServer must be embedded to have forward compatible implementations.
type UnimplementedPostServer struct {
}

func (UnimplementedPostServer) UploadVideo(context.Context, *UploadVideoRequest) (*UploadVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadVideo not implemented")
}
func (UnimplementedPostServer) GetVideoList(context.Context, *GetVideoListRequest) (*GetVideoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoList not implemented")
}
func (UnimplementedPostServer) GetHotVideoList(context.Context, *GetHotVideoRequest) (*GetHotVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHotVideoList not implemented")
}
func (UnimplementedPostServer) GetVideoByUid(context.Context, *GetVideoByUidRequest) (*GetVideoByUidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoByUid not implemented")
}
func (UnimplementedPostServer) SearchVideo(context.Context, *SearchVideoRequest) (*SearchVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchVideo not implemented")
}
func (UnimplementedPostServer) GetTagList(context.Context, *GetTagListRequest) (*GetTagListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagList not implemented")
}
func (UnimplementedPostServer) SetCommentNum(context.Context, *CommentNumRequest) (*CommentNumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCommentNum not implemented")
}
func (UnimplementedPostServer) SetLikeNum(context.Context, *LikeNumRequest) (*LikeNumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLikeNum not implemented")
}
func (UnimplementedPostServer) CollectNum(context.Context, *CollectNumRequest) (*CollectNumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectNum not implemented")
}
func (UnimplementedPostServer) mustEmbedUnimplementedPostServer() {}

// UnsafePostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostServer will
// result in compilation errors.
type UnsafePostServer interface {
	mustEmbedUnimplementedPostServer()
}

func RegisterPostServer(s grpc.ServiceRegistrar, srv PostServer) {
	s.RegisterService(&Post_ServiceDesc, srv)
}

func _Post_UploadVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).UploadVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Post_UploadVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).UploadVideo(ctx, req.(*UploadVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_GetVideoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).GetVideoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Post_GetVideoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).GetVideoList(ctx, req.(*GetVideoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_GetHotVideoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHotVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).GetHotVideoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Post_GetHotVideoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).GetHotVideoList(ctx, req.(*GetHotVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_GetVideoByUid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoByUidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).GetVideoByUid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Post_GetVideoByUid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).GetVideoByUid(ctx, req.(*GetVideoByUidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_SearchVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).SearchVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Post_SearchVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).SearchVideo(ctx, req.(*SearchVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_GetTagList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).GetTagList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Post_GetTagList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).GetTagList(ctx, req.(*GetTagListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_SetCommentNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentNumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).SetCommentNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Post_SetCommentNum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).SetCommentNum(ctx, req.(*CommentNumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_SetLikeNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeNumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).SetLikeNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Post_SetLikeNum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).SetLikeNum(ctx, req.(*LikeNumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Post_CollectNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectNumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServer).CollectNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Post_CollectNum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServer).CollectNum(ctx, req.(*CollectNumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Post_ServiceDesc is the grpc.ServiceDesc for Post service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Post_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "post.Post",
	HandlerType: (*PostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadVideo",
			Handler:    _Post_UploadVideo_Handler,
		},
		{
			MethodName: "GetVideoList",
			Handler:    _Post_GetVideoList_Handler,
		},
		{
			MethodName: "GetHotVideoList",
			Handler:    _Post_GetHotVideoList_Handler,
		},
		{
			MethodName: "GetVideoByUid",
			Handler:    _Post_GetVideoByUid_Handler,
		},
		{
			MethodName: "SearchVideo",
			Handler:    _Post_SearchVideo_Handler,
		},
		{
			MethodName: "GetTagList",
			Handler:    _Post_GetTagList_Handler,
		},
		{
			MethodName: "SetCommentNum",
			Handler:    _Post_SetCommentNum_Handler,
		},
		{
			MethodName: "SetLikeNum",
			Handler:    _Post_SetLikeNum_Handler,
		},
		{
			MethodName: "CollectNum",
			Handler:    _Post_CollectNum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cmd/post/rpc/post.proto",
}
