version: '3.5'
networks:
  video-net:
    driver: bridge
# 服务所需环境
services:
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    restart: always
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "9411:9411"
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
      - ES_SERVER_URLS=http://elasticsearch:9200
      - LOG_LEVEL=debug
    networks:
      - video-net
  prometheus:
    image: prom/prometheus:v2.28.1
    container_name: prometheus
    environment:
      TZ: Asia/Shanghai
    volumes:
      - ./deploy/prometheus/service/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./data/prometheus/data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: always
    user: root
    ports:
      - 9090:9090
    networks:
      - video-net
  grafana:
    image: grafana/grafana:8.0.6
    container_name: grafana
    hostname: grafana
    user: root
    environment:
      TZ: Asia/Shanghai
    restart: always
    volumes:
      - './data/grafana/data:/var/lib/grafana'
    ports:
      - "3000:3000"
    networks:
      - video-net
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.13.4
    container_name: elasticsearch
    user: root
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - TZ=Asia/Shanghai
    restart: always
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - video-net
  mysql:
    image: mysql:latest
    container_name: mysql8
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 123456
      MYSQL_USER: root
      MYSQL_PASSWORD: 123456
      TZ: Asia/Shanghai
    ports:
      - "3306:3306"
    volumes:
      - ./deploy/data/mysql/data:/var/lib/mysql
      - ./deploy/data/mysql/conf:/etc/mysql/conf.d/
      - ./deploy/data/mysql/logs:/logs
      - ./deploy/config/db:/docker-entrypoint-initdb.d
    command:
      --character-set-service=utf8mb4
      --default-authentication-plugin=mysql_native_password
      --collation-service=utf8mb4_general_ci
      --explicit_defaults_for_timestamp=true
#      --lower_case_table_names=1
    networks:
      - video-net

#  mysql:
#    container_name: mysql8
#    image: mysql:8.0.20
#    restart: always
#    ports:
#      - 3308:3306
#    environment:
#      TZ: Asia/Shanghai
#      MYSQL_ROOT_PASSWORD: 123456
##      MYSQL_DATABASE: gogo_dy
#    #    volumes:
#    #      - ${MYSQL_DIR}/data:/var/lib/mysql
#    #      - ${MYSQL_DIR}/conf:/etc/mysql/conf.d/
#    #      - ${MYSQL_DIR}/logs:/logs
#    command:
#      --default-authentication-plugin=mysql_native_password
#      --character-set-service=utf8mb4
#      --collation-service=utf8mb4_general_ci
#      --explicit_defaults_for_timestamp=true
#      --lower_case_table_names=2
#    networks:
#      - video-net
#  mysql:
#    container_name: mysql8
#    image: mysql:8.0.20
#    restart: always
#    ports:
#      - "3308:3306"
#    environment:
#      TZ: Asia/Shanghai
#      MYSQL_ROOT_PASSWORD: root@gzhu
#    volumes:
#      - ./deploy/data/mysql/data:/var/lib/mysql
#      - ./deploy/data/mysql/conf:/etc/mysql/conf.d/
#      - ./deploy/data/mysql/logs:/logs
#      - ./deploy/config/db_init:/docker-entrypoint-initdb.d
#    command:
#      --default-authentication-plugin=mysql_native_password
#      --character-set-service=utf8mb4
#      --collation-service=utf8mb4_general_ci
#      --explicit_defaults_for_timestamp=true
#      --lower_case_table_name=1
#    networks:
#      - video-net
  Redis:
    container_name: redis6
    image: redis:6.2.7
    restart: always
    volumes:
      - ./deploy/data/redisx/data:/data
      - ./deploy/data/redisx/redisx.conf:/etc/redisx/redisx.conf
    ports:
      - "6379:6379"
    command: redisx-service /etc/redisx/redisx.conf
    networks:
      - video-net
  kafka:
    container_name: kafka
    image: obsidiandynamics/kafka
    restart: "no"
    ports:
      - "2181:2181"
      - "9092:9092"
    environment:
      KAFKA_LISTENERS: "INTERNAL://:29092,EXTERNAL://:9092"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:29092,EXTERNAL://localhost:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT: "6000"
      KAFKA_RESTART_ATTEMPTS: "10"
      KAFKA_RESTART_DELAY: "5"
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: "0"
    networks:
      - video-net
  kafdrop:
    container_name: kafdrop
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
      JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    depends_on:
      - "kafka"
    networks:
      - video-net

    #查看elasticsearch数据 - Kibana to view Elasticsearch data
  kibana:
    image: docker.elastic.co/kibana/kibana:7.13.4
    container_name: kibana
    environment:
      - elasticsearch.hosts=http://elasticsearch:9200
      - TZ=Asia/Shanghai
    restart: always
    networks:
      - video-net
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch

  #消费kafka中filebeat收集的数据输出到es - The data output collected by FileBeat in Kafka is output to ES
  go-stash:
    image: kevinwan/go-stash:1.0 # if you "macOs intel" or "linux amd"
    #image: kevinwan/go-stash:1.0-arm64 #  if you "macOs m1" or "linux arm"
    container_name: go-stash
    environment:
      # 时区上海 - Time zone Shanghai (Change if needed)
      TZ: Asia/Shanghai
    user: root
    restart: always
    volumes:
      - ./deploy/go-stash/etc:/app/etc
    networks:
      - video-net
    depends_on:
      - elasticsearch

  #收集业务数据 - Collect business data
  filebeat:
    image: elastic/filebeat:7.13.4
    container_name: filebeat
    environment:
      # 时区上海 - Time zone Shanghai (Change if needed)
      TZ: Asia/Shanghai
    user: root
    restart: always
    entrypoint: "filebeat -e -strict.perms=false"  #解决配置文件权限问题 - Solving the configuration file.sql permissions
    volumes:
      - ./deploy/filebeat/conf/filebeat.yml:/usr/share/filebeat/filebeat.yml
      # 此处需指定docker的containers目录，取决于你docker的配置 - The containers directory of docker needs to be specified here, depending on your docker configuration
      # 如snap安装的docker，则为/var/snap/docker/common/var-lib-docker/containers - Example if docker is installed by Snap /var/snap/docker/common/var-lib-docker/containers
      # - /var/snap/docker/common/var-lib-docker/containers:/var/lib/docker/containers
      - /var/lib/docker/containers:/var/lib/docker/containers
    networks:
      - video-net

  etcd:
    container_name: etcd3
    image: bitnami/etcd:latest
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
    privileged: true
    ports:
      - "2379:2379"
    networks:
      - video-net




