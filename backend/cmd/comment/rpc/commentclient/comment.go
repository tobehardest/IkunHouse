// Code generated by goctl. DO NOT EDIT.
// Source: comment.proto

package commentClient

import (
	"context"

	"IkunHouse/cmd/comment/rpc/comment"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CommentItem    = comment.CommentItem
	CommentListReq = comment.CommentListReq
	CommentListRes = comment.CommentListRes
	CommentReq     = comment.CommentReq
	CommentRes     = comment.CommentRes
	DelCommentReq  = comment.DelCommentReq
	DelCommentRes  = comment.DelCommentRes

	Comment interface {
		Comment(ctx context.Context, in *CommentReq, opts ...grpc.CallOption) (*CommentRes, error)
		DelComment(ctx context.Context, in *DelCommentReq, opts ...grpc.CallOption) (*DelCommentRes, error)
		CommentList(ctx context.Context, in *CommentListReq, opts ...grpc.CallOption) (*CommentListRes, error)
	}

	defaultComment struct {
		cli zrpc.Client
	}
)

func NewComment(cli zrpc.Client) Comment {
	return &defaultComment{
		cli: cli,
	}
}

func (m *defaultComment) Comment(ctx context.Context, in *CommentReq, opts ...grpc.CallOption) (*CommentRes, error) {
	client := comment.NewCommentClient(m.cli.Conn())
	return client.Comment(ctx, in, opts...)
}

func (m *defaultComment) DelComment(ctx context.Context, in *DelCommentReq, opts ...grpc.CallOption) (*DelCommentRes, error) {
	client := comment.NewCommentClient(m.cli.Conn())
	return client.DelComment(ctx, in, opts...)
}

func (m *defaultComment) CommentList(ctx context.Context, in *CommentListReq, opts ...grpc.CallOption) (*CommentListRes, error) {
	client := comment.NewCommentClient(m.cli.Conn())
	return client.CommentList(ctx, in, opts...)
}
