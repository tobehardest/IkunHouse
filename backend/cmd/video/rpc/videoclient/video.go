// Code generated by goctl. DO NOT EDIT.
// Source: video.proto

package videoclient

import (
	"context"

	"video_clip/cmd/video/rpc/video"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddReadCountRequest  = video.AddReadCountRequest
	AddReadCountResponse = video.AddReadCountResponse
	ExistVideoRequest    = video.ExistVideoRequest
	ExistVideoResponse   = video.ExistVideoResponse
	GetTypeListRequest   = video.GetTypeListRequest
	GetTypeListResponse  = video.GetTypeListResponse
	GetVideoRequest      = video.GetVideoRequest
	GetVideoResponse     = video.GetVideoResponse
	Type                 = video.Type
	UploadVideoRequest   = video.UploadVideoRequest
	UploadVideoResponse  = video.UploadVideoResponse
	VideoModel           = video.VideoModel

	Video interface {
		UploadVideo(ctx context.Context, in *UploadVideoRequest, opts ...grpc.CallOption) (*UploadVideoResponse, error)
		AddReadCount(ctx context.Context, in *AddReadCountRequest, opts ...grpc.CallOption) (*AddReadCountResponse, error)
		GetVideoList(ctx context.Context, in *GetVideoRequest, opts ...grpc.CallOption) (*GetVideoResponse, error)
		// rpc AddCollect(AddCollectRequest) returns(AddCollectResponse);
		GetTypeList(ctx context.Context, in *GetTypeListRequest, opts ...grpc.CallOption) (*GetTypeListResponse, error)
		IfExistVideo(ctx context.Context, in *ExistVideoRequest, opts ...grpc.CallOption) (*ExistVideoResponse, error)
	}

	defaultVideo struct {
		cli zrpc.Client
	}
)

func NewVideo(cli zrpc.Client) Video {
	return &defaultVideo{
		cli: cli,
	}
}

func (m *defaultVideo) UploadVideo(ctx context.Context, in *UploadVideoRequest, opts ...grpc.CallOption) (*UploadVideoResponse, error) {
	client := video.NewVideoClient(m.cli.Conn())
	return client.UploadVideo(ctx, in, opts...)
}

func (m *defaultVideo) AddReadCount(ctx context.Context, in *AddReadCountRequest, opts ...grpc.CallOption) (*AddReadCountResponse, error) {
	client := video.NewVideoClient(m.cli.Conn())
	return client.AddReadCount(ctx, in, opts...)
}

func (m *defaultVideo) GetVideoList(ctx context.Context, in *GetVideoRequest, opts ...grpc.CallOption) (*GetVideoResponse, error) {
	client := video.NewVideoClient(m.cli.Conn())
	return client.GetVideoList(ctx, in, opts...)
}

// rpc AddCollect(AddCollectRequest) returns(AddCollectResponse);
func (m *defaultVideo) GetTypeList(ctx context.Context, in *GetTypeListRequest, opts ...grpc.CallOption) (*GetTypeListResponse, error) {
	client := video.NewVideoClient(m.cli.Conn())
	return client.GetTypeList(ctx, in, opts...)
}

func (m *defaultVideo) IfExistVideo(ctx context.Context, in *ExistVideoRequest, opts ...grpc.CallOption) (*ExistVideoResponse, error) {
	client := video.NewVideoClient(m.cli.Conn())
	return client.IfExistVideo(ctx, in, opts...)
}
