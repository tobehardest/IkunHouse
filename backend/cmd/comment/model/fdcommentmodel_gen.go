// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	fdCommentFieldNames          = builder.RawFieldNames(&FdComment{})
	fdCommentRows                = strings.Join(fdCommentFieldNames, ",")
	fdCommentRowsExpectAutoSet   = strings.Join(stringx.Remove(fdCommentFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	fdCommentRowsWithPlaceHolder = strings.Join(stringx.Remove(fdCommentFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheFdCommentIdPrefix = "cache:fdComment:id:"
)

type (
	fdCommentModel interface {
		Insert(ctx context.Context, data *FdComment) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*FdComment, error)
		Update(ctx context.Context, data *FdComment) error
		Delete(ctx context.Context, id int64) error
	}

	defaultFdCommentModel struct {
		sqlc.CachedConn
		table string
	}

	FdComment struct {
		Id         int64     `db:"id"`          // id
		Pid        int64     `db:"pid"`         // 父级id
		Type       int64     `db:"type"`        // 评论类型:1视频, 2评论.
		Uid        int64     `db:"uid"`         // 评论作者ID
		Content    string    `db:"content"`     // 评论内容
		Status     int64     `db:"status"`      // 评论状态
		CreateTime time.Time `db:"create_time"` // 创建时间
	}
)

func newFdCommentModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultFdCommentModel {
	return &defaultFdCommentModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`fd_comment`",
	}
}

func (m *defaultFdCommentModel) Delete(ctx context.Context, id int64) error {
	fdCommentIdKey := fmt.Sprintf("%s%v", cacheFdCommentIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, fdCommentIdKey)
	return err
}

func (m *defaultFdCommentModel) FindOne(ctx context.Context, id int64) (*FdComment, error) {
	fdCommentIdKey := fmt.Sprintf("%s%v", cacheFdCommentIdPrefix, id)
	var resp FdComment
	err := m.QueryRowCtx(ctx, &resp, fdCommentIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", fdCommentRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFdCommentModel) Insert(ctx context.Context, data *FdComment) (sql.Result, error) {
	fdCommentIdKey := fmt.Sprintf("%s%v", cacheFdCommentIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, fdCommentRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Pid, data.Type, data.Uid, data.Content, data.Status)
	}, fdCommentIdKey)
	return ret, err
}

func (m *defaultFdCommentModel) Update(ctx context.Context, data *FdComment) error {
	fdCommentIdKey := fmt.Sprintf("%s%v", cacheFdCommentIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, fdCommentRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Pid, data.Type, data.Uid, data.Content, data.Status, data.Id)
	}, fdCommentIdKey)
	return err
}

func (m *defaultFdCommentModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheFdCommentIdPrefix, primary)
}

func (m *defaultFdCommentModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", fdCommentRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultFdCommentModel) tableName() string {
	return m.table
}
